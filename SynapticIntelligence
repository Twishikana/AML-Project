{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"SynapticIntelligence","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"7UVvdlPl8ZIR"},"source":["import math\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","import torchvision\n","import torch.utils.data as data_utils\n","import numpy as np\n","import subprocess\n","import os\n","import random\n","import matplotlib.pyplot as plt\n","\n","from torch.nn.parameter import Parameter\n","from torch.nn import init\n","from torch.nn import Module\n","from torch.nn import init\n","from torchvision import datasets, transforms\n","from PIL import Image\n","from IPython.core.debugger import set_trace\n","\n","n_tasks = 10\n","n_epochs = 3\n","print_messages = False"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"v0OxdXcU83KX","colab":{"base_uri":"https://localhost:8080/","height":289},"executionInfo":{"status":"ok","timestamp":1587847349231,"user_tz":240,"elapsed":21952,"user":{"displayName":"Aparna Bhutani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjdYWR9FUvv-eUD7xPCiNPJ8C1BD8jKW8agyk_q=s64","userId":"09974948641759808950"}},"outputId":"a4570884-0413-4f34-a8be-eef8e72042c1"},"source":["pip install ax-platform"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: ax-platform in /usr/local/lib/python3.6/dist-packages (0.1.9)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.6/dist-packages (from ax-platform) (1.0.3)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.6/dist-packages (from ax-platform) (1.4.1)\n","Requirement already satisfied: plotly in /usr/local/lib/python3.6/dist-packages (from ax-platform) (4.4.1)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.6/dist-packages (from ax-platform) (0.22.2.post1)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.6/dist-packages (from ax-platform) (2.11.2)\n","Requirement already satisfied: botorch==0.2.1 in /usr/local/lib/python3.6/dist-packages (from ax-platform) (0.2.1)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas->ax-platform) (2018.9)\n","Requirement already satisfied: python-dateutil>=2.6.1 in /usr/local/lib/python3.6/dist-packages (from pandas->ax-platform) (2.8.1)\n","Requirement already satisfied: numpy>=1.13.3 in /usr/local/lib/python3.6/dist-packages (from pandas->ax-platform) (1.18.3)\n","Requirement already satisfied: retrying>=1.3.3 in /usr/local/lib/python3.6/dist-packages (from plotly->ax-platform) (1.3.3)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from plotly->ax-platform) (1.12.0)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.6/dist-packages (from scikit-learn->ax-platform) (0.14.1)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.6/dist-packages (from jinja2->ax-platform) (1.1.1)\n","Requirement already satisfied: torch>=1.3.1 in /usr/local/lib/python3.6/dist-packages (from botorch==0.2.1->ax-platform) (1.4.0)\n","Requirement already satisfied: gpytorch>=1.0.0 in /usr/local/lib/python3.6/dist-packages (from botorch==0.2.1->ax-platform) (1.1.1)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Zq9CBwKW8gmT"},"source":["def rotate_dataset(d, rotation):\n","  result = torch.FloatTensor(d.size(0), 784)\n","  tensor = transforms.ToTensor()\n","\n","  for i in range(d.size(0)):\n","    img = Image.fromarray(d[i].numpy(), mode=\"L\")\n","    result[i] = tensor(img.rotate(rotation)).view(784)\n","  return result\n","\n","mnist_path = \"mnist.npz\"\n","if not os.path.exists(os.path.join(\"/content\", mnist_path)):\n","  subprocess.call(\"wget https://s3.amazonaws.com/img-datasets/mnist.npz\", shell=True)\n","\n","f = np.load(mnist_path)\n","x_tr = torch.from_numpy(f[\"x_train\"])\n","y_tr = torch.from_numpy(f[\"y_train\"]).long()\n","x_te = torch.from_numpy(f[\"x_test\"])\n","y_te = torch.from_numpy(f[\"y_test\"]).long()\n","f.close()\n","\n","# Rotate Dataset\n","tasks_tr = []\n","tasks_te = []\n","mnist_rot_path = \"mnist_rotations.pt\"\n","if not os.path.exists(os.path.join(\"/content\", mnist_rot_path)):\n","    torch.manual_seed(0)\n","\n","    for t in range(n_tasks):\n","      min_rot = 1.0 * t / n_tasks * (180.0 - 0.0) + 0.0\n","      max_rot = 1.0 * (t + 1) / n_tasks * (180.0 - 0.0) + 0.0\n","      rot = random.random() * (max_rot - min_rot) + min_rot\n","\n","      tasks_tr.append([rot, rotate_dataset(x_tr, rot), y_tr])\n","      tasks_te.append([rot, rotate_dataset(x_te, rot), y_te])\n","\n","    torch.save([tasks_tr, tasks_te], 'mnist_rotations.pt')\n","else:\n","    tasks_tr, tasks_te = torch.load('/content/mnist_rotations.pt')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"45TsAXvL8jny"},"source":["class SIModel(nn.Module):\n","    def __init__(self):\n","        super(SIModel, self).__init__()\n","\n","        # SI Hyperparameters\n","        self.si_c = 0.          #-> hyperparam: how strong to weigh SI-loss (\"regularisation strength\")\n","        self.epsilon = 0.1      #-> dampening parameter: bounds 'omega' when squared parameter-change goes to 0\n","    \n","    def init_weights(self, m):\n","        if type(m) == nn.Linear:\n","            torch.nn.init.kaiming_uniform_(m.weight)\n","            m.bias.data.fill_(0.01)\n","\n","    def init(self, n_neurons):\n","        # Our Network\n","        self.net = nn.Sequential(\n","            nn.Linear(28*28, n_neurons),\n","            nn.ReLU(),\n","            nn.Linear(n_neurons, n_neurons),\n","            nn.ReLU(),\n","            nn.Linear(n_neurons, 10)\n","        )\n","        self.net.apply(self.init_weights)\n","\n","    def forward(self, x):\n","        return self.net(x)\n","\n","    def update_omega(self, W):\n","        '''\n","        After completing training on a task, update the per-parameter regularization strength.\n","        [W] <dict> estimated parameter-specific contribution to changes in total loss of completed task\n","        '''\n","\n","        # Loop over all parameters\n","        for n, p in self.named_parameters():\n","            if p.requires_grad:\n","                n = n.replace('.', '__')\n","\n","                # Find/calculate new values for quadratic penalty on parameters\n","                p_prev = getattr(self, '{}_SI_prev_task'.format(n))\n","                p_current = p.detach().clone()\n","                p_change = p_current - p_prev\n","                \n","                omega_add = W[n]/(p_change**2 + self.epsilon)\n","                try:\n","                    omega = getattr(self, '{}_SI_omega'.format(n))\n","                except AttributeError:\n","                    omega = p.detach().clone().zero_()\n","                omega_new = omega + omega_add\n","\n","                # Store these new values in the model\n","                self.register_buffer('{}_SI_prev_task'.format(n), p_current)\n","                self.register_buffer('{}_SI_omega'.format(n), omega_new)\n","\n","    def surrogate_loss(self):\n","        '''\n","        Calculate SI's surrogate loss.\n","        '''\n","        try:\n","            losses = []\n","            for n, p in self.named_parameters():\n","                if p.requires_grad:\n","                    # Retrieve previous parameter values and their normalized path integral (i.e., omega)\n","                    n = n.replace('.', '__')\n","                    prev_values = getattr(self, '{}_SI_prev_task'.format(n))\n","                    omega = getattr(self, '{}_SI_omega'.format(n))\n","                    # Calculate SI's surrogate loss, sum over all parameters\n","                    losses.append((omega * (p-prev_values)**2).sum())\n","            return sum(losses)\n","        except AttributeError:\n","            # SI-loss is 0 if there is no stored omega yet\n","            return torch.tensor(0., device=self._device())\n","\n","    def _device(self):\n","        return next(self.parameters()).device\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AO-Ad-5z8qCL"},"source":["\n","def train_task(model, device, train_loader, optimizer, batch_log = 0):\n","    model.train()\n","    # Prepare <dicts> to store running importance estimates and param-values before update\n","    W = {}\n","    param_old = {}\n","    for name, param in model.named_parameters():\n","        if param.requires_grad:\n","            name = name.replace('.', '__')\n","            W[name] = param.data.clone().zero_()\n","            param_old[name] = param.data.clone()\n","\n","    losses = []\n","    total_losses = []\n","    for k in range(n_epochs):\n","        if print_messages:\n","            print(\"----> Epoch {}:\".format(k))\n","        for batch_idx, (x, y) in enumerate(train_loader):\n","            x, y = x.to(device), y.to(device)\n","            optimizer.zero_grad()\n","\n","            # Get the prediction\n","            y_hat = model(x)\n","\n","            # Calculate training-precision\n","            precision = (y == y_hat.max(1)[1]).sum().item() / x.size(0)\n","\n","            # Calculate the loss using cross entropy\n","            # and the surrogate loss\n","            loss = F.cross_entropy(input=y_hat, target=y, reduction='mean')\n","            surrogate_loss = model.surrogate_loss()\n","            total_loss = loss + model.si_c * surrogate_loss\n","\n","            # Backpropagate errors\n","            total_loss.backward()\n","\n","            # Take optimization-step\n","            optimizer.step()\n","\n","            # Update running parameter importance estimates in W\n","            # \"In practice, we can approximate w as the running sum of the \n","            # product of the gradient g(w) and the parameter update\" \n","            for name, param in model.named_parameters():\n","                if param.requires_grad:\n","                    name = name.replace('.', '__')\n","                    if param.grad is not None:\n","                        W[name].add_(-param.grad*(param.detach()-param_old[name]))\n","                    param_old[name] = param.detach().clone()\n","\n","            # Print out a log\n","            if batch_idx % batch_log == 0:\n","                losses.append(loss.item())\n","                total_losses.append(total_loss.item())\n","                if print_messages:\n","                    print('---->[{}/{} ({:.0f}%)]\\tPrecision: {:.6f}\\tLoss: {:.6f}\\tSurrogate Loss: {:.6f}\\tTotal Loss: {:.6f}'.format(\n","                        batch_idx * len(x), len(train_loader.dataset),\n","                        100. * batch_idx / len(train_loader), \n","                        precision, loss.item(), surrogate_loss.item(), total_loss.item()))\n","            \n","    # After finishing training on a task, update the omega value in the model\n","    model.update_omega(W)\n","\n","    return losses, total_losses\n","def test(model, device, test_loader):\n","    model.eval()\n","    test_loss = 0\n","    correct = 0\n","    with torch.no_grad():\n","        for x, y in test_loader:\n","            x, y = x.to(device), y.to(device)\n","            y_hat = model(x)\n","            test_loss += F.cross_entropy(input=y_hat, target=y, reduction='mean')\n","            pred = y_hat.argmax(dim=1, keepdim=True)  # get the index of the max log-probability\n","            correct += pred.eq(y.view_as(pred)).sum().item()\n","    \n","    test_loss /= len(test_loader.dataset)\n","    return correct, test_loss\n","\n","def eval_on_tasks(model, device, test_loaders):\n","    acc = []\n","    test_losses = []\n","    for j in range(n_tasks):\n","        correct, test_loss = test(model, device, test_loaders[j])\n","        acc.append(correct / len(test_loaders[j].dataset))\n","        test_losses.append(test_loss)\n","        if print_messages:\n","            print('---->Test set {}: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)'.format(\n","                j, test_loss, correct, len(test_loaders[j].dataset),\n","                100. * correct / len(test_loaders[j].dataset)))\n","    return acc, test_losses"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gP81r-tw8xJU"},"source":["config={\n","    \"lr\": 0.003, \n","    \"si_c\": 0.152, \n","    \"si_epsilon\": 0.01,\n","    \"optimizer\": \"adam\",\n","    \"batch_size\": 64,\n","    \"n_neurons\": 100,\n","    \"sample_size\": 60000\n","    }"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jAIlz0T98_LT"},"source":["def main(config): \n","    # Use cuda?\n","    cuda = torch.cuda.is_available()\n","    device = torch.device(\"cuda\" if cuda else \"cpu\")\n","\n","    # Create Model\n","    model = SIModel()\n","    model.init(config[\"n_neurons\"])\n","    model.to(device)\n","    optim_list = [{'params': filter(lambda p: p.requires_grad, model.parameters()), 'lr': config['lr']}]\n","    if config['optimizer'] == \"adam\":\n","        optimizer = optim.Adam(optim_list, betas=(0.9, 0.999))\n","    else:\n","        optimizer = optim.SGD(optim_list)\n","\n","    # SI Parameters\n","    model.si_c = config[\"si_c\"]\n","    model.epsilon = config[\"si_epsilon\"]\n","\n","    for name, param in model.named_parameters():\n","        if param.requires_grad:\n","            name = name.replace('.', '__')\n","            model.register_buffer('{}_SI_prev_task'.format(name), param.data.clone())\n","\n","    # Load our test data\n","    test_loaders = []\n","    for i in range(n_tasks):\n","        test_loaders.append(data_utils.DataLoader(data_utils.TensorDataset(tasks_te[i][1], tasks_te[i][2]), batch_size=1000, shuffle = False))\n","\n","    # Training\n","    if print_messages:\n","        print(\"--> Training:\")\n","\n","    total_acc = []\n","    total_test_losses = []\n","    \n","    # Before we start training we will get a baseline by evaluating our tasks\n","    acc, test_losses = eval_on_tasks(model, device, test_loaders)\n","    total_acc.append(acc)\n","    total_test_losses.append(test_losses)\n","\n","    for i in range(n_tasks):\n","        if print_messages:\n","            print(\"--> Training Task {}:\".format(i))\n","\n","        perm = np.random.permutation(tasks_tr[i][1].size(0))\n","        perm = perm[:config['sample_size']]\n","        train_data = data_utils.TensorDataset(tasks_tr[i][1], tasks_tr[i][2])\n","        train_loader = data_utils.DataLoader(train_data, batch_size=config[\"batch_size\"], \n","                                      sampler = data_utils.SubsetRandomSampler(perm), drop_last = True)\n","        \n","        train_losses, total_train_losses = train_task(model, device, train_loader, optimizer, 100)\n","        \n","        # Reset the optimizer (if using adam)\n","        if config['optimizer'] == \"adam\":\n","            model.optimizer = optim.Adam(optim_list, betas=(0.9, 0.999))\n","\n","        if print_messages:\n","            print(train_losses)\n","            print(total_train_losses)\n","            print(\"--> Finished Training Task {}. Starting Test phase:\".format(i))\n","\n","        acc, test_losses = eval_on_tasks(model, device, test_loaders)\n","        total_acc.append(acc)\n","        total_test_losses.append(test_losses)\n","    \n","    return total_acc, total_test_losses"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NYSs_iuX9oUK","colab":{"base_uri":"https://localhost:8080/","height":408},"executionInfo":{"status":"ok","timestamp":1587847734358,"user_tz":240,"elapsed":355526,"user":{"displayName":"Aparna Bhutani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjdYWR9FUvv-eUD7xPCiNPJ8C1BD8jKW8agyk_q=s64","userId":"09974948641759808950"}},"outputId":"3a2f27fa-6291-4654-efac-94e5fc368889"},"source":["total_acc, total_test_losses = main(config)\n","\n","# Get the accuracy metric as defined by Facebook paper: sum(R_Ti) \n","# where T is the test set of the last Task and i is the current trained task\n","average_acc = np.mean(total_acc[n_tasks-1])\n","print(\"Accuracy:\", average_acc)\n","print(\"Confusion matrix:\")\n","print('\\n'.join([','.join([str(item) for item in row]) for row in total_acc]))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Accuracy: 0.640165\n","Confusion matrix:\n","0.159,0.1325,0.1036,0.08,0.0696,0.0617,0.0851,0.1274,0.1332,0.14,0.139,0.1311,0.1443,0.112,0.1314,0.1028,0.0856,0.0744,0.1037,0.0852\n","0.9726,0.9508,0.8644,0.6217,0.4517,0.4455,0.2698,0.1886,0.1488,0.117,0.1163,0.1299,0.1438,0.1763,0.219,0.2369,0.2699,0.2757,0.2805,0.2759\n","0.9692,0.9546,0.8822,0.6692,0.5079,0.4996,0.3113,0.2169,0.1676,0.1232,0.1217,0.0983,0.1043,0.1301,0.1644,0.1831,0.2473,0.2669,0.2905,0.2871\n","0.9666,0.9676,0.9357,0.7902,0.6228,0.6135,0.3682,0.2464,0.1922,0.1393,0.1373,0.1108,0.1126,0.1312,0.16,0.1794,0.243,0.2697,0.2963,0.3009\n","0.9182,0.9385,0.9438,0.9065,0.8375,0.8265,0.6137,0.4165,0.3108,0.1877,0.1802,0.1093,0.1075,0.1201,0.1497,0.1724,0.2418,0.2678,0.2962,0.3008\n","0.8283,0.8662,0.9075,0.9248,0.9088,0.9029,0.7911,0.6071,0.4596,0.2584,0.2475,0.1214,0.1028,0.0941,0.1039,0.1155,0.1472,0.1845,0.2338,0.2315\n","0.8078,0.8495,0.8982,0.9256,0.9245,0.9208,0.8447,0.6808,0.5353,0.3082,0.3005,0.1368,0.1089,0.0942,0.0937,0.1099,0.141,0.1738,0.2264,0.2256\n","0.7774,0.8224,0.879,0.9155,0.9261,0.925,0.8753,0.7506,0.6167,0.3689,0.3587,0.1487,0.1134,0.0928,0.0905,0.1045,0.1291,0.1591,0.2071,0.2024\n","0.723,0.7579,0.8246,0.885,0.9095,0.9097,0.8923,0.8178,0.7271,0.4819,0.4712,0.1988,0.1539,0.1273,0.1181,0.1226,0.1368,0.1648,0.2105,0.2036\n","0.7228,0.7468,0.81,0.8746,0.9021,0.9059,0.8983,0.8578,0.8044,0.6125,0.603,0.2876,0.2121,0.1554,0.1276,0.1318,0.1399,0.1638,0.2064,0.2022\n","0.5062,0.5266,0.5992,0.7209,0.781,0.7877,0.8355,0.847,0.8396,0.7921,0.7888,0.5206,0.3928,0.2939,0.2056,0.1869,0.1603,0.1664,0.1815,0.1705\n","0.4902,0.4928,0.5181,0.6305,0.7097,0.7123,0.798,0.8422,0.8612,0.8593,0.8578,0.6698,0.5504,0.429,0.3092,0.2618,0.1832,0.1745,0.1685,0.1536\n","0.467,0.4538,0.4736,0.5581,0.63,0.6353,0.7316,0.7993,0.8241,0.8554,0.855,0.7631,0.6771,0.5727,0.4414,0.3718,0.2446,0.203,0.1711,0.1589\n","0.47,0.4544,0.4627,0.5323,0.6011,0.604,0.697,0.7615,0.8003,0.861,0.8615,0.8069,0.741,0.6473,0.5091,0.4408,0.295,0.2318,0.187,0.1712\n","0.4899,0.4689,0.4705,0.5258,0.5943,0.5979,0.6809,0.7453,0.7851,0.8482,0.8481,0.8168,0.78,0.7153,0.6018,0.5289,0.3481,0.274,0.2148,0.1884\n","0.4882,0.4725,0.4711,0.5218,0.5783,0.5805,0.6566,0.7058,0.7475,0.8265,0.8247,0.8136,0.7889,0.7475,0.6659,0.5994,0.4092,0.3183,0.239,0.2054\n","0.496,0.477,0.4743,0.5124,0.5639,0.5685,0.6374,0.6935,0.7351,0.8201,0.8211,0.8171,0.8012,0.7695,0.7117,0.6617,0.4765,0.3709,0.271,0.2346\n","0.5224,0.4953,0.4896,0.5083,0.5566,0.5641,0.6217,0.6779,0.7145,0.7865,0.7867,0.7854,0.7758,0.7548,0.7227,0.693,0.5599,0.4658,0.3446,0.3051\n","0.5342,0.5134,0.5207,0.5305,0.576,0.5788,0.6266,0.6812,0.7196,0.7868,0.7861,0.7855,0.7736,0.756,0.7303,0.7136,0.6303,0.5619,0.4408,0.3985\n","0.528,0.521,0.529,0.5465,0.5921,0.5977,0.6422,0.6931,0.7168,0.7658,0.7659,0.7516,0.7414,0.7266,0.7079,0.6983,0.6493,0.6205,0.5276,0.482\n","0.4598,0.4695,0.5092,0.5554,0.563,0.575,0.5462,0.5,0.459,0.4417,0.4393,0.4428,0.4263,0.4237,0.457,0.4727,0.5973,0.6826,0.7347,0.7312\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"peSdtR_d9F49","colab":{"base_uri":"https://localhost:8080/","height":530},"executionInfo":{"status":"ok","timestamp":1587849974436,"user_tz":240,"elapsed":2235539,"user":{"displayName":"Aparna Bhutani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjdYWR9FUvv-eUD7xPCiNPJ8C1BD8jKW8agyk_q=s64","userId":"09974948641759808950"}},"outputId":"241eb5ad-4e70-4ca7-8214-e36f442f39a2"},"source":["def tune(config, objective):\n","    total_acc, total_loss = main(config)\n","    if objective == \"accuracy\":\n","        return np.mean(total_acc[n_tasks-1])\n","    elif objective == \"loss\":\n","        return np.mean(total_loss[n_tasks-1])\n","    else:\n","        return\n","\n","from ax import optimize\n","best_parameters, values, experiment, model = optimize(\n","    parameters=[\n","        {\n","            \"name\": \"lr\",\n","            \"type\": \"range\",\n","            \"bounds\": [1e-4, 0.4], \n","            \"log_scale\": True,\n","            \"value_type\": \"float\",\n","        },\n","        {  \n","            \"name\": \"si_c\",\n","            \"type\": \"range\",\n","            \"bounds\": [0.01, 0.5],\n","            \"value_type\": \"float\",\n","        },\n","        {  \n","            \"name\": \"si_epsilon\",\n","            \"type\": \"fixed\",\n","            \"value\": 0.01,\n","            \"value_type\": \"float\",\n","        },\n","        {  \n","            \"name\": \"batch_size\",\n","            \"type\": \"fixed\",\n","            \"value\": 64,\n","            \"value_type\": \"int\",\n","        },\n","        {  \n","            \"name\": \"sample_size\",\n","            \"type\": \"fixed\",\n","            \"value\": 10000,\n","            \"value_type\": \"int\",\n","        },\n","        {  \n","            \"name\": \"n_neurons\",\n","            \"type\": \"fixed\",\n","            \"value\": 100,\n","            \"value_type\": \"int\",\n","        },\n","        {  \n","            \"name\": \"optimizer\",\n","            \"type\": \"fixed\",\n","            \"value\": \"adam\",\n","            \"value_type\": \"str\",\n","        },\n","    ],\n","    evaluation_function=lambda p: tune(p, \"accuracy\"),\n","    objective_name='accuracy',\n",")\n","print(best_parameters)\n","print(values)\n","    #evaluation_function=lambda p: np.mean(main(p)[n_tasks-1]),\n","    #minimize=True,)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[INFO 04-25 20:49:01] ax.modelbridge.dispatch_utils: Using Bayesian Optimization generation strategy: GenerationStrategy(name='Sobol+GPEI', steps=[Sobol for 7 arms, GPEI for subsequent arms], generated 0 arm(s) so far). Iterations after 7 will take longer to generate due to model-fitting.\n","[INFO 04-25 20:49:01] ax.service.managed_loop: Started full optimization with 20 steps.\n","[INFO 04-25 20:49:01] ax.service.managed_loop: Running optimization trial 1...\n","[INFO 04-25 20:50:44] ax.service.managed_loop: Running optimization trial 2...\n","[INFO 04-25 20:52:32] ax.service.managed_loop: Running optimization trial 3...\n","[INFO 04-25 20:54:23] ax.service.managed_loop: Running optimization trial 4...\n","[INFO 04-25 20:56:06] ax.service.managed_loop: Running optimization trial 5...\n","[INFO 04-25 20:57:54] ax.service.managed_loop: Running optimization trial 6...\n","[INFO 04-25 20:59:37] ax.service.managed_loop: Running optimization trial 7...\n","[INFO 04-25 21:01:36] ax.service.managed_loop: Running optimization trial 8...\n","[INFO 04-25 21:03:23] ax.service.managed_loop: Running optimization trial 9...\n","[INFO 04-25 21:05:09] ax.service.managed_loop: Running optimization trial 10...\n","[INFO 04-25 21:06:55] ax.service.managed_loop: Running optimization trial 11...\n","[INFO 04-25 21:08:43] ax.service.managed_loop: Running optimization trial 12...\n","[INFO 04-25 21:10:28] ax.service.managed_loop: Running optimization trial 13...\n","[INFO 04-25 21:12:13] ax.service.managed_loop: Running optimization trial 14...\n","[INFO 04-25 21:14:00] ax.service.managed_loop: Running optimization trial 15...\n","[INFO 04-25 21:16:02] ax.service.managed_loop: Running optimization trial 16...\n","[INFO 04-25 21:16:02] ModelBridge: Leaving out out-of-design observations for arms: 14_0\n","[INFO 04-25 21:18:03] ax.service.managed_loop: Running optimization trial 17...\n","[INFO 04-25 21:18:03] ModelBridge: Leaving out out-of-design observations for arms: 14_0\n","[INFO 04-25 21:20:07] ax.service.managed_loop: Running optimization trial 18...\n","[INFO 04-25 21:20:07] ModelBridge: Leaving out out-of-design observations for arms: 14_0\n","[INFO 04-25 21:22:10] ax.service.managed_loop: Running optimization trial 19...\n","[INFO 04-25 21:22:10] ModelBridge: Leaving out out-of-design observations for arms: 14_0\n","[INFO 04-25 21:24:12] ax.service.managed_loop: Running optimization trial 20...\n","[INFO 04-25 21:24:12] ModelBridge: Leaving out out-of-design observations for arms: 14_0\n"],"name":"stderr"},{"output_type":"stream","text":["{'lr': 0.0017537008541867398, 'si_c': 0.5, 'si_epsilon': 0.01, 'batch_size': 64, 'sample_size': 10000, 'n_neurons': 100, 'optimizer': 'adam'}\n","({'accuracy': 0.6061250148926116}, {'accuracy': {'accuracy': 1.441216403657841e-09}})\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"dwRRtTqL9mD0","colab":{"base_uri":"https://localhost:8080/","height":425},"executionInfo":{"status":"ok","timestamp":1587852529502,"user_tz":240,"elapsed":2554837,"user":{"displayName":"Aparna Bhutani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjdYWR9FUvv-eUD7xPCiNPJ8C1BD8jKW8agyk_q=s64","userId":"09974948641759808950"}},"outputId":"ff428dc3-1a1c-4afc-d469-3044f1996be5"},"source":["best_parameters, values, experiment, model = optimize(\n","    parameters=[\n","        {\n","            \"name\": \"lr\",\n","            \"type\": \"range\",\n","            \"bounds\": [1e-4, 0.4], \n","            \"log_scale\": True,\n","            \"value_type\": \"float\",\n","        },\n","        {  \n","            \"name\": \"si_c\",\n","            \"type\": \"fixed\",\n","            \"value\": 0.152,\n","            \"value_type\": \"float\",\n","        },\n","        {  \n","            \"name\": \"si_epsilon\",\n","            \"type\": \"fixed\",\n","            \"value\": 0.01,\n","            \"value_type\": \"float\",\n","        },\n","        {  \n","            \"name\": \"batch_size\",\n","            \"type\": \"choice\",\n","            \"values\": [64, 128, 256],\n","            \"value_type\": \"int\",\n","        },\n","        {  \n","            \"name\": \"sample_size\",\n","            \"type\": \"choice\",\n","            \"values\": [1000, 5000, 10000, 20000, 40000, 60000],\n","            \"value_type\": \"int\",\n","        },\n","        {  \n","            \"name\": \"n_neurons\",\n","            \"type\": \"fixed\",\n","            \"value\": 100,\n","            \"value_type\": \"int\",\n","        },\n","        {  \n","            \"name\": \"optimizer\",\n","            \"type\": \"fixed\",\n","            \"value\": \"adam\",\n","            \"value_type\": \"str\",\n","        },\n","    ],\n","    evaluation_function=lambda p: tune(p, \"accuracy\"),\n","    objective_name='accuracy',\n",")\n","print(best_parameters)\n","print(values)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[INFO 04-25 21:26:14] ax.modelbridge.dispatch_utils: Using Sobol generation strategy.\n","[INFO 04-25 21:26:14] ax.service.managed_loop: Started full optimization with 20 steps.\n","[INFO 04-25 21:26:14] ax.service.managed_loop: Running optimization trial 1...\n","[INFO 04-25 21:28:51] ax.service.managed_loop: Running optimization trial 2...\n","[INFO 04-25 21:30:43] ax.service.managed_loop: Running optimization trial 3...\n","[INFO 04-25 21:33:26] ax.service.managed_loop: Running optimization trial 4...\n","[INFO 04-25 21:34:35] ax.service.managed_loop: Running optimization trial 5...\n","[INFO 04-25 21:37:58] ax.service.managed_loop: Running optimization trial 6...\n","[INFO 04-25 21:41:27] ax.service.managed_loop: Running optimization trial 7...\n","[INFO 04-25 21:42:29] ax.service.managed_loop: Running optimization trial 8...\n","[INFO 04-25 21:45:40] ax.service.managed_loop: Running optimization trial 9...\n","[INFO 04-25 21:49:18] ax.service.managed_loop: Running optimization trial 10...\n","[INFO 04-25 21:50:31] ax.service.managed_loop: Running optimization trial 11...\n","[INFO 04-25 21:51:55] ax.service.managed_loop: Running optimization trial 12...\n","[INFO 04-25 21:52:54] ax.service.managed_loop: Running optimization trial 13...\n","[INFO 04-25 21:55:55] ax.service.managed_loop: Running optimization trial 14...\n","[INFO 04-25 21:57:02] ax.service.managed_loop: Running optimization trial 15...\n","[INFO 04-25 21:58:15] ax.service.managed_loop: Running optimization trial 16...\n","[INFO 04-25 21:59:37] ax.service.managed_loop: Running optimization trial 17...\n","[INFO 04-25 22:01:37] ax.service.managed_loop: Running optimization trial 18...\n","[INFO 04-25 22:03:18] ax.service.managed_loop: Running optimization trial 19...\n","[INFO 04-25 22:04:44] ax.service.managed_loop: Running optimization trial 20...\n"],"name":"stderr"},{"output_type":"stream","text":["{'lr': 0.0025156293631680756, 'batch_size': 128, 'sample_size': 60000, 'si_c': 0.152, 'si_epsilon': 0.01, 'n_neurons': 100, 'optimizer': 'adam'}\n","({'accuracy': 0.60483}, {'accuracy': {'accuracy': 0.0}})\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"-XVnFncIm79e","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1587891000531,"user_tz":240,"elapsed":538,"user":{"displayName":"Aparna Bhutani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjdYWR9FUvv-eUD7xPCiNPJ8C1BD8jKW8agyk_q=s64","userId":"09974948641759808950"}},"outputId":"7014b830-1339-471f-d442-e4220ef01058"},"source":["avg_acc_vals = [53.355, 61.325, 62.167, 65.123, 71.682, 76.777, 79.867, 79.460, 79.800, 80.259]\n","\n","avg_acc_vals"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[53.355, 61.325, 62.167, 65.123, 71.682, 76.777, 79.867, 79.46, 79.8, 80.259]"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"OOICgY2RrUvs"},"source":["import matplotlib.pyplot as plt\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0K0dnJqG-uER","colab":{"base_uri":"https://localhost:8080/","height":610},"executionInfo":{"status":"ok","timestamp":1587892930856,"user_tz":240,"elapsed":720,"user":{"displayName":"Aparna Bhutani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjdYWR9FUvv-eUD7xPCiNPJ8C1BD8jKW8agyk_q=s64","userId":"09974948641759808950"}},"outputId":"f57a1009-99f2-4dfe-cc61-0b4d56847e61"},"source":["fig, ax = plt.subplots(figsize = (15,10))\n","plt.plot([1, 2, 3,4,5,6,7,8,9,10], avg_acc_vals, '-o', label=\"Synaptic\", color = 'r')\n","plt.xlabel('Tasks', fontsize=14)\n","plt.ylabel('Average Accuracy', fontsize=14)\n","\n","ax.grid()\n","# plt.title('CL Strategies Comparison on MNIST', fontsize=14);\n","plt.xticks([1,2,3,4,5,6,7,8,9,10])\n","plt.legend(prop={'size': 10});"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1080x720 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"bu0LA666rSvs"},"source":[""],"execution_count":null,"outputs":[]}]}